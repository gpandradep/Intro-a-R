---
title: "4. Vectores, Matrices, listas y dataframes"
description: "Objetos más complejos, distinguirlos y extraer información"
author: "Gabriel Andrade Ponce"
date: "2022-11-24"
---

# Vectores

Los vectores son objetos que llevan una colección de uno o más datos del mismo tipo. El tipo del vector es igual al tipo de datos que contiene y solo puede contener datos del mismo tipo. Los vectores también tienen un largo, es decir el número de datos que contiene.

![](vectors.png){fig-align="center"}

En esencia un solo número o carácter es un vector de largo 1

```{r}
minivec <- 25
is.vector(minivec)
length(minivec)
```

## Concatenar

Para generar vectores de mayor tamaño debemos usar la función de `c()`o concatenar.

```{r}
# Vector numerico
vec1 <- c(1,223,4,5)
length(vec1)
class(vec1)

# Vector de caracteres
vec2 <- c("a", "b", "c", "d")
class(vec2)

# Vector lógico

vec3 <- c(TRUE, FALSE, TRUE, FALSE)
class(vec2)

# Si admite NA

vec4 <- c(2.5, 30, 45.5, NA)
class(vec4)
```

Podemos incluso concatenar objetos que contengan vectores de la misma clase

```{r}
vec5 <- c(27,28,29,30)
(vec6 <- c(vec1, vec5))
```

¿Que sucede cuando creamos un vector con dos tipos de datos?

```{r}
vec7 <- c(1,2,3, "4")
class(vec7)
```

![](/posts/Ayuda%20R/teletubo.png){fig-align="center" width="290"}

## Secuencias

Podemos crear vectores mediante función de secuencia. Cuando es una secuencia sencilla podemos usar el comando `:`. Si necesitamos secuencias más específicas o con ciertas características, entonces podemos usar la función `seq`. Ésta función tiene varios argumentos, `from` es el número de inicio, el `to` el número final, `length.out` sirve para controlar el largo del vector y mediante `by` podemos especificar el intervalo de la secuencia.

```{r}

(vec_seq1 <- 1:10)

(vec_seq2 <- seq(from=1, # Valor de inicio
               to= 6,
               length.out= 10)) # Valor final

(vec_seq3 <- seq(from= 1,
                to= 10,
                by= 0.5))
```

## Repetir valores

`rep` permite repetir valores un determinado número de veces. El argumento de `times` nos permite especificar el número de veces que un valor o un vector se va a repetir. Cuando especificamos `each` podemos controlar el número de veces que se repite cada valor dentro del vector.

```{r}
(vec_rep1 <- rep(x=25,
                times= 5))
(vec_rep2 <- rep(vec_rep1,
                 times=3))

(vec_rep3 <- rep(vec2,
                each=3))
```

## Caso de factores

Los factores son un caso especial de los caracteres y tienen la peculiaridad de que están compuestos por niveles. En otras palabras los factores pueden asumir un número limitado de valores posibles conocidos o niveles.

Por ejemplo, imaginemos un experimento donde se aplica el tratamiento de sombra a unas plantas en crecimiento. En este caso el tratamiento de sombra es un factor y puede tomar "si" cuando tiene sombra o "no" cuando no se aplicó sombra. Para crear un factor usamos la función `factor`

```{r}
somb <- c(rep("si", 5), rep("no", 5))

fact_somb <- factor(somb)

class(somb)
class(fact_somb)
```

Es importante especificar los factores porque muchos funciones y análisis estadísticos requieren de usar objetos de tipo factor.

## Crear vectores basados en números aleatorios

Podemos crear vectores basados en números al azar basados en una distribución. Por ejemplo, la más común es la distribución normal y se crea mediante `rnorm`. Ésta función hace parte de una familia de funciones basadas en distribuciones (ver help de rnorm) y básicamente genera números aleatorios basados en una distribución normal.

```{r}
# en este ejemplo vamos a crear un vector de 100 valores
vec_norm <- rnorm(100, 
                  mean = 0, 
                  sd=1)
is.vector(vec_norm)
```

## Selección de elementos

En los vectores podemos seleccionar valores con `[]` , el número que pongamos dentro será la posición del valor que seleccionaremos

```{r}
vec_rep3[1] # el primer valor
vec_rep2[5] # el quinto valor

```

Podemos seleccionar varios valores utilizando el comando de concatenar

```{r}
vec_seq3[c(1,5,9)] # Seleccionamos el primer, el quinto y el 9 valor
```

## Operaciones de vectores

Las operaciones aritméticas y lógicas también funcionan con vectores. Pero en este caso obtenemos un resultado por cada elemento

```{r}
(vec_sum <- vec_seq3 + 5)
```

```{r}
vec_seq3 > 5
```

# Matrices

Las matrices son vectores multi-dimensionales y al igual que los vectores solo pueden contener un tipo de datos. Las matrices tienen dos dimensiones "alto" dado por el número de filas y "largo" por el número de columnas.

![](Matrix.png)

Podemos crear una matriz a partir de un vector, especificando las dimensiones de columnas por medio de la función `matrix`. Los argumentos de `nrow` y `ncol` ayudan a definir el número de filas y columnas respectivamente.

```{r}
(x1 <- matrix(1:20))

# Podemos especificar las columnas y las filas

matrix(1:20, nrow = 5, ncol = 4)

matrix(1:20, nrow = 10, ncol = 10)

matrix(1:20, nrow = 4, ncol = 3)

```

A veces es más intuitivo unir dos o más vectores previamente existentes, por lo que en estos casos podemos combinarlos por filas `rbind` o por columnas `cbind` .

```{r}
v1 <- 1:4
v2 <- 9:12
v3 <- 13:16

(m1 <- rbind(v1, v2, v3))
(m3 <- cbind(v1, v2, v3))
class(m1)

v4 <- 20:28

m2 <- rbind(v1,v4)
```

Se pueden combinar vectores de distinto tipo, pero el de tipo carácter siempre transformará al numérico. Entonces, cuidado con lo que combinan.

```{r}
v5 <- c("1", "2", "3", "4")

(m4 <- cbind(v1, v5))
str(m4)
dim(m4)
class(m4)
```

## Operadores de matrices

Se pueden usar operadores aritméticos en matrices de tipo numérico.

```{r}
m2+1
# m4+1


```

Podemos hacer uso de la función `t()` para transponer una matriz

```{r}
# Podemos transponer una matriz
m3t <- t(m3)
```

## Selección de valores

Igual que en los vectores podemos usar`[]` para seleccionar valores. La grán diferencia es que como las matrices son de 2 dimensiones, debemos especificar ambas en los paréntesis y separarlos por una coma: \[filas , columnas\]. Cuando seleccionamos más de una fila o columna podemos usar `c` para concatenar el vector de selección. Cuando ponemos un signo de "menos" (-) dentro de los paréntesis de selección, vamos a eliminar dicha columna o fila.

```{r}

# Vamos a seleccionar la fila 1 y 3 de m3
m3[c(1,3),]

#Tabién podemos seleccionar valores de la diagonal por medio de diag
diag(m3)
diag(m3t)

# Eliminar la fila 1 y seleccionar la columna 2
m3[-1,2]

# Eliminar las filas 1 y 4, y seleccionar las columnas 1 y 3
m3[c(-1,-4), c(1,3)]
```

Cunado usamos los selectores al lado izquierdo de la definición de objeto, podemos reemplazar los valores, por los que estamos definiendo.

```{r}
# Podemos reemplazar valores de las matrices

# Reemplazar la segunda fila por 100, 200 y 300
m3[2,] <- c(100,200, 300)
m3

# Reemplazar fila 4 y 3 y columna 2 por 1000
m3[c(4,3),2] <- 1000
m3

# Reemplaza 1 y 3 fila y 1 y 3 fila por 500
m3[c(1,3), c(1,3)] <- 500
m3

# Reemplaza la tercea columna por la 1 columna más 3
m3[,3] <- m3[,1]+3 
m3
```

## Array

![](array.png){fig-align="center"}

El array es un tipo matriz, pero con más de dos dimensiones 😵🤯. Las array, al igual que las matrices, solo pueden ser formadas por objetos del mismo tipo. Podemos usar la función `array` y definir filas, columnas y tercera dimensión

```{r}

AR1 <- array(1:30, dim = c(3,4,2))
AR1
class(AR1)
dim(AR1)
str(AR1)
# Seleccionar la celda con el valor de 13
x <- AR1[,,2]
```

# Data Frame

![](dataframe.png){fig-align="center"}

Los data frames al igual que las matrices son objetos de dos dimensiones, pero pueden tener diferentes tipos de datos. Ésta característica los convierte en uno de los objetos más usados para muchos tipos de análisis, por su versatilidad. En general se puede entender las filas de un dataframe como observaciones, casos o individuos y las columnas como variables.

En los data frames cada columna puede ser de distinto tipo pero todas tienen que ser del mismo largo

```{r}
col1 <- 1:5
col2 <- c("Z", "W", "L", "M", "R")
col3 <- c(TRUE, FALSE, FALSE, TRUE, FALSE)

df1 <- data.frame(numeros= col1,
                  letras= col2,
                  logico= col3)

```

Podemos usar la función `view` para visualizar el dataframe

```{r}
#| eval: false
View(df1)
```

```{r}
#| echo: false
DT::datatable(df1)
```

Podemos extraer diferentes características de los data frames

```{r}
# las dimensiones
dim(df1)

# Los nombres de las columnas
names(df1)

# La clase
class(df1)
```

Podemos transformar una matriz a un data frame o un data frame con solo números a una matriz.

```{r}
df2 <- as.data.frame(m3)
df2
```

## Seleccionar en data frame

En los data frames también podemos seleccionar valores por medio de `[]` , incluyendo los nombres de las columnas

```{r}
# Seleccionar primera columna
df1[,1]

# Seleccionar primera fila
df1[1,]

# Seleccionar por nombres
df1[c("letras", "logico")]
```

Otra manera muy común de seleccionar columnas en un data frame es por medio de `$` . El operador de peso selecciona el objeto conservando su clase original, es decir el data frame

```{r}
(letras2 <- df1$letras)
```

# Lista

![](Litst.png){fig-align="center"}

Las listas como los vectores son de una sola dimensión. Sin embargo, pueden tener diferentes tipos de valores e incluso de elementos. Una lista puede tener dentro un vector, una matriz, un data frame e incluso otra lista

```{r}

v <- 1:10
df <- data.frame(num= 1:4, letra= letters[1:4])

lista <- list(vector=v, dataframe= df, Matriz= m3)

dim(lista)
length(lista)

```

Podemos utilizar los selectores que ya vimos en las listas

```{r}
# selección que resulta en lista
(v2 <- lista[1])

# Selección que termina en vector
(v3 <- lista[[1]])
class(v3)

# Selección de dataframe
(df_list <- lista[[2]])

# Selección termina en matriz
(mat <- lista$Matriz)


```
