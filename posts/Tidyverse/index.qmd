---
title: "8. Modo tidyverse"
description: "Paquetes y filosofia tidyverse"
author: "Gabriel Andrade Ponce y Karen Velásquez-C"
date: "2024-05-11"
bibliography: references.bib
---

# ¿Qué es?

**Tidyverse** es una colección de paquetes disponibles en **R** y orientados a la manipulación, importación, exploración y visualización de datos y que se utiliza exhaustivamente en ciencia de datos. El uso de Tidyverse permite facilitar el trabajo estadístico y la generación de trabajos reproducibles. Está compuesto de los siguientes paquetes [@araneda2021].

![](Tidypaquetes.jpeg){fig-align="center" width="500"}

# Instalar paquetes

```{r}
#| eval: false
install.packages("palmerpenguins")
install.packages("tidyverse")
```

```{r}
library(tidyverse)
library(palmerpenguins)
```

![“Artwork by \@allison_horst”](palmerpenguins.png){fig-align="center" width="350"}

# Datos

Datos colectados en las Islas Palmer de 2007 - 2009 por Dr. Kristen Gorman [@horst2020]

```{r}
data(package = 'palmerpenguins')
head(penguins)

df <- penguins
```

![“Artwork by \@allison_horst”](culmen_depth.png){fig-align="center" width="500"}

# Algunas funciones

## Renombrar

```{r}
df2 <- rename(df,
  peso= "body_mass_g",
  largo_pico = "bill_length_mm",
  prof_pico = "bill_depth_mm"
)
names(df2)
```

## Seleccionar y filtrar datos

```{r}
df_fil1 <- filter(df2, peso> 4000)
df2[df2$peso > 4000,]
```

```{r}
min(df_fil1$peso)
```

```{r}
df_fil2 <- filter(df2, peso>4000, 
                  sex != "male", 
                  largo_pico < 47, 
                  species %in% c("Gentoo", "Adelie"))
```

```{r}
df2[df2$peso > 4000 & df2$species == c("Adelie","Gentoo"),]
```

## Seleccionar columnas

```{r}
df_sel <- dplyr::select(df_fil1, species, island)

dplyr::select(df_fil1, -species, -island)
```

incluso permite re ordenar y renombrar

```{r}
selec <- dplyr::select(df_fil1, 
              isla=island, 
              aleta=flipper_length_mm, 
              species)
```

o seleccionar dependiendo de la clase

```{r}
dplyr::select(df, where(is.factor))
```

## Nuevas columnas y operaciones

`mutate()` función que nos permite crear, modificar y eliminar columnas

```{r}
df_mut <- mutate(df_fil1, 
                 porportion= largo_pico/length(df_fil1$species))
```

### Conteos

```{r}
count(df_mut, species)
count(df_mut, porportion)
```

### Agrupar

pero es más divertido agrupando los datos y poder realizar más de una operación sobre los datos

```{r}
df_group <- group_by(df_mut, island)

resum <- summarise(df_group,
                   total_peso= sum(peso),
                   promedio_peso= mean(peso),
                   sd_peso= sd(peso))
```

## Uso de tuberías o pipes

“%\>%” es una herramienta para la ejecución de pipeline o tuberías de comandos que permite una encadenamiento de funciones de la forma [@araneda2021a].

![](Pipe.jpg){fig-align="center" width="900"}

Forma "normal"

```{r}
df_pipe <- rename(df, peso= "body_mass_g",
         largo_pico = "bill_length_mm",
         prof_pico = "bill_depth_mm")
df_pipe <- select(df_pipe, -island)
df_pipe <- filter(df_pipe, peso>4000)
df_pipe <- mutate(df_pipe, relacion= largo_pico/prof_pico)
```

Forma "pipe"

```{r}
df_pipe <- df %>%
  rename(peso= "body_mass_g",
         largo_pico = "bill_length_mm",
         prof_pico = "bill_depth_mm"
  ) %>%
  dplyr::select(-island) %>% 
  filter(peso>4000) %>%
  mutate(relacion= largo_pico/prof_pico)
```

## Especificando ggplot

Gramática para hacer gráficos. La filosofía de ggplot va en capas

1\. Capa es para los datos y la estética de los datos

```{r}
ggplot(data= df2, 
       aes(x=largo_pico, y=peso))
```

Ahora la geometría de los datos que queremos

```{r}
ggplot(data= df2, 
       aes(x=largo_pico, y=peso))+
  geom_point()
```

la geometria puede tener estéticas

```{r}
ggplot(data= df2, 
       aes(x=largo_pico, y=peso))+
  geom_point(aes(color=species, shape= species))
```

Podemos tener varias geometrías

```{r}
ggplot(data= df2, 
       aes(x=largo_pico, y=peso))+
  geom_point(aes(color=species, shape= species))+
  geom_smooth(aes(color= species),method = "lm", se= T)
```

```{r}
ggplot(data= df2, 
       aes(x=largo_pico, y=peso))+
  geom_smooth(method = "lm", se= T)+
  geom_point()
```

Hay varios temas por defecto en ggplot que controlan las características del gráfico

```{r}
ggplot(data= df2, 
       aes(x=largo_pico, y=peso))+
  geom_point(aes(color=species, shape= species))+
  geom_smooth(aes(color= species),method = "lm", se= T)+
  theme_bw()
```

probemos a hacer histogramas

```{r}
ggplot(data = df2, aes(x=flipper_length_mm))+
  geom_histogram()
```

histograma por especie

```{r}
ggplot(data = df2, aes(x=flipper_length_mm))+
  geom_histogram(aes(fill= species), alpha= 0.5)
```

Podemos controlar los colores

```{r}
ggplot(data = df2, aes(x=flipper_length_mm))+
  geom_histogram(aes(fill= species), alpha= 0.5)+
  scale_fill_manual(values = c("#812C30","purple","black"))
```

Cambiar el tema

```{r}
ggplot(data = df2, aes(x=flipper_length_mm))+
  geom_histogram(aes(fill= species), alpha= 0.5)+
  scale_fill_manual(values = c("darkorange","purple","cyan4"))+
  theme_gray()
```

Cambiar la leyenda

```{r}
ggplot(data = df2, aes(x=flipper_length_mm))+
  geom_histogram(aes(fill= species), alpha= 0.5)+
  scale_fill_manual(name=" Especies", values = c("darkorange","purple","cyan4"))+
  theme_minimal()+
  labs(x= "Largo de la aleta (mm)",
       y= " Frecuencia",
       title = " Histograma de aletas")
```

Por últim también podemos hacer marcos del mismo gráfico agrupado por determinada variable

```{r}
ggplot(data = df2, aes(x=flipper_length_mm))+
  geom_histogram(aes(fill= species), alpha= 0.5)+
  scale_fill_manual(name=" Especies", values = c("darkorange","purple","cyan4"))+
  theme_minimal()+
  labs(x= "Largo de la aleta (mm)",
       y= " Frecuencia",
       title = " Histograma de aletas")+
  facet_grid(~island)
```
