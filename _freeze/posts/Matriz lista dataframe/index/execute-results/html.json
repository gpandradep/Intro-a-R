{
  "hash": "08be13d797af76ec4c4b16bdbbb9c018",
  "result": {
    "markdown": "---\ntitle: \"4. Vectores, Matrices, listas y dataframes\"\ndescription: \"Objetos más complejos, distinguirlos y extraer información\"\nauthor: \"Gabriel Andrade Ponce\"\ndate: \"2022-11-24\"\n---\n\n\n# Vectores\n\nLos vectores son objetos que llevan una colección de uno o más datos del mismo tipo. El tipo del vector es igual al tipo de datos que contiene y solo puede contener datos del mismo tipo. Los vectores también tienen un largo, es decir el número de datos que contiene.\n\n![](vectors.png){fig-align=\"center\"}\n\nEn esencia un solo número o caracter es un vector de largo 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nminivec <- 25\nis.vector(minivec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nlength(minivec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## Concantenar\n\nPara generar vectores de mayor tamaño debemos usar la función de `c()`o concatenar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector numerico\nvec1 <- c(1,223,4,5)\nlength(vec1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nclass(vec1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\n# Vector de caracteres\nvec2 <- c(\"a\", \"b\", \"c\", \"d\")\nclass(vec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# Vector lógico\n\nvec3 <- c(TRUE, FALSE, TRUE, FALSE)\nclass(vec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# Si admite NA\n\nvec4 <- c(2.5, 30, 45.5, NA)\nclass(vec4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nPodemos incluso concatenar objetos que contengan vectores de la misma clase\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec5 <- c(27,28,29,30)\n(vec6 <- c(vec1, vec5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   1 223   4   5  27  28  29  30\n```\n:::\n:::\n\n\n¿Que sucede cuando creamos un vector con dos tipos de datos?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec7 <- c(1,2,3, \"4\")\nclass(vec7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n![](/posts/Ayuda%20R/teletubo.png){fig-align=\"center\" width=\"290\"}\n\n## Secuencias\n\nPodemos crear vectores mediante función de secuencia. Cuando es una secuencia sencilla podemos usar el comando `:`. Si necesitamos secuencias más específicas o con ciertas características, entonces podemos usar la función `seq`. Ésta función tiene varios argumentos, `from` es el número de inicio, el `to` el número final y mediante `by` podemos especificar el intervalo de la secuencia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vec_seq1 <- 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\n(vec_seq2 <- seq(from=1, # Valor de inicio\n               to= 6)) # Valor final\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\n(vec_seq3 <- seq(from= 1,\n                to= 10,\n                by= 0.5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n[16]  8.5  9.0  9.5 10.0\n```\n:::\n:::\n\n\n## Repetir valores\n\n`rep` permite repetir valores un determinado número de veces. El argumento de `times` nos permite especificar el número de veces que un valor o un vector se va a repetir. Cuando especificamos `each` podemos controlar el número de veces que se repite cada valor dentro del vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vec_rep1 <- rep(x=25,\n                times= 5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25 25 25 25 25\n```\n:::\n\n```{.r .cell-code}\n(vec_rep2 <- rep(vec_rep1,\n                 times=3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n```\n:::\n\n```{.r .cell-code}\n(vec_rep3 <- rep(vec2,\n                each=3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"a\" \"a\" \"b\" \"b\" \"b\" \"c\" \"c\" \"c\" \"d\" \"d\" \"d\"\n```\n:::\n:::\n\n\n## Caso de factores\n\nLos factores son un caso especial de los caracteres y tienen la peculiaridad de que están compuestos por niveles. En otras palabras los factores pueden asumir un número limitado de valores posibles conocidos o niveles.\n\nPor ejemplo, imaginemos un experimento donde se aplica el tratamiento de sombra a unas plantas en crecimiento. En este caso el tratamiento de sombra es un factor y puede tomar \"si\" cuando tiene sombra o \"no\" cuando no se aplicó sombra. Para crear un factor usamos la función `factor`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsomb <- c(rep(\"si\", 5), rep(\"no\", 5))\n\nfact_somb <- factor(somb)\n\nclass(somb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(fact_somb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n:::\n\n\nEs importante especificar los factores porque muchos funciones y análisis estadísticos requieren de usar objetos de tipo factor.\n\n## Crear vectores basados en números aleatorios\n\nPodemos crear vectores basados en números al azar basados en una distribución. Por ejemplo, la más común es la distribución normal y se crea mediante `rnorm`. Ésta función hace parte de una familia de funciones basadas en distribuciones y basicamente traduce números aleatorios basados en una distribución normal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# en este ejemplo vamos a crear un vector de 100 valores\nvec_norm <- rnorm(100, \n                  mean = 0, \n                  sd=1)\nis.vector(vec_norm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Selección de elementos\n\nEn los vectores podemos seleccionar valores con `[]` , el número que pongamos dentro será la posición del valor que seleccionaremos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_rep3[1] # el primer valor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"\n```\n:::\n\n```{.r .cell-code}\nvec_rep2[5] # el quinto valor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n\nPodemos seleccionar varios valores utilizando el comando de concatenar\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_seq3[c(1,5,9)] # Seleccionamos el primer, el quinto y el 9 valor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n:::\n\n\n## Operaciones de vectores\n\nLas operaciones aritméticas y lógicas también funcionan con vectores. Pero en este caso obtenemos un resultado por cada elemento\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vec_sum <- vec_seq3 + 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  6.0  6.5  7.0  7.5  8.0  8.5  9.0  9.5 10.0 10.5 11.0 11.5 12.0 12.5 13.0\n[16] 13.5 14.0 14.5 15.0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_seq3 > 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n:::\n\n\n# Matrices\n\nLas matrices son vectores multi-dimensionales y al igual que los vectores solo pueden contener un tipo de datos. Las matrices tienen dos dimensiones \"alto\" dado por el número de filas y largo por el número de columnas.\n\n![](Matrix.png)\n\nPodemos crear una matriz a partir de un vector, especificando las dimensiones de columnas por medio de la función matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(x1 <- matrix(1:20))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1]\n [1,]    1\n [2,]    2\n [3,]    3\n [4,]    4\n [5,]    5\n [6,]    6\n [7,]    7\n [8,]    8\n [9,]    9\n[10,]   10\n[11,]   11\n[12,]   12\n[13,]   13\n[14,]   14\n[15,]   15\n[16,]   16\n[17,]   17\n[18,]   18\n[19,]   19\n[20,]   20\n```\n:::\n\n```{.r .cell-code}\n# Podemos especificar las columnas y las filas\n\nmatrix(1:20, nrow = 5, ncol = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    6   11   16\n[2,]    2    7   12   17\n[3,]    3    8   13   18\n[4,]    4    9   14   19\n[5,]    5   10   15   20\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:20, nrow = 10, ncol = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1   11    1   11    1   11    1   11    1    11\n [2,]    2   12    2   12    2   12    2   12    2    12\n [3,]    3   13    3   13    3   13    3   13    3    13\n [4,]    4   14    4   14    4   14    4   14    4    14\n [5,]    5   15    5   15    5   15    5   15    5    15\n [6,]    6   16    6   16    6   16    6   16    6    16\n [7,]    7   17    7   17    7   17    7   17    7    17\n [8,]    8   18    8   18    8   18    8   18    8    18\n [9,]    9   19    9   19    9   19    9   19    9    19\n[10,]   10   20   10   20   10   20   10   20   10    20\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:20, nrow = 4, ncol = 3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in matrix(1:20, nrow = 4, ncol = 3): la longitud de los datos [20] no es\nun submúltiplo o múltiplo del número de columnas [3] en la matriz\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n:::\n:::\n\n\ncbind y rbind\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- 1:4\nv2 <- 9:12\nv3 <- 13:16\n\n(m1 <- rbind(v1, v2, v3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   [,1] [,2] [,3] [,4]\nv1    1    2    3    4\nv2    9   10   11   12\nv3   13   14   15   16\n```\n:::\n\n```{.r .cell-code}\n(m3 <- cbind(v1, v2, v3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     v1 v2 v3\n[1,]  1  9 13\n[2,]  2 10 14\n[3,]  3 11 15\n[4,]  4 12 16\n```\n:::\n\n```{.r .cell-code}\nclass(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"matrix\" \"array\" \n```\n:::\n\n```{.r .cell-code}\nv4 <- 20:28\n\nm2 <- rbind(v1,v4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in rbind(v1, v4): number of columns of result is not a multiple of\nvector length (arg 1)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nv5 <- c(\"1\", \"2\", \"3\", \"4\")\n\n(m4 <- cbind(v1, v5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     v1  v5 \n[1,] \"1\" \"1\"\n[2,] \"2\" \"2\"\n[3,] \"3\" \"3\"\n[4,] \"4\" \"4\"\n```\n:::\n\n```{.r .cell-code}\nstr(m4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:4, 1:2] \"1\" \"2\" \"3\" \"4\" \"1\" \"2\" \"3\" \"4\"\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : chr [1:2] \"v1\" \"v5\"\n```\n:::\n\n```{.r .cell-code}\ndim(m4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 2\n```\n:::\n\n```{.r .cell-code}\nclass(m4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"matrix\" \"array\" \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm2+1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\nv1    2    3    4    5    2    3    4    5    2\nv4   21   22   23   24   25   26   27   28   29\n```\n:::\n\n```{.r .cell-code}\n# m4+1\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Podemos transponer una matriz\nm3t <- t(m3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Podemos usar [] para seleccionar columas y filas de las matrices\n\nm3[c(1,3),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     v1 v2 v3\n[1,]  1  9 13\n[2,]  3 11 15\n```\n:::\n\n```{.r .cell-code}\ndiag(m3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 10 15\n```\n:::\n\n```{.r .cell-code}\ndiag(m3t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 10 15\n```\n:::\n\n```{.r .cell-code}\nm3[-1,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 11 12\n```\n:::\n\n```{.r .cell-code}\nm3[c(-1,-4), c(1,3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     v1 v3\n[1,]  2 14\n[2,]  3 15\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Podemos reemplazar valores de las matrices\n\nm3[2,] <- c(100,200, 300)\nm3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      v1  v2  v3\n[1,]   1   9  13\n[2,] 100 200 300\n[3,]   3  11  15\n[4,]   4  12  16\n```\n:::\n\n```{.r .cell-code}\nm3[c(4,3),2] <- 1000\nm3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      v1   v2  v3\n[1,]   1    9  13\n[2,] 100  200 300\n[3,]   3 1000  15\n[4,]   4 1000  16\n```\n:::\n\n```{.r .cell-code}\nm3[c(1,3), c(1,3)] <- 500\nm3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      v1   v2  v3\n[1,] 500    9 500\n[2,] 100  200 300\n[3,] 500 1000 500\n[4,]   4 1000  16\n```\n:::\n\n```{.r .cell-code}\nm3[,3] <- m3[,1]+3 \nm3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      v1   v2  v3\n[1,] 500    9 503\n[2,] 100  200 103\n[3,] 500 1000 503\n[4,]   4 1000   7\n```\n:::\n:::\n\n\n## Array\n\n![](array.png){fig-align=\"center\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Un Array es una matriz con más de dos dimensiones\n\nAR1 <- array(1:30, dim = c(3,4,2))\nAR1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   13   16   19   22\n[2,]   14   17   20   23\n[3,]   15   18   21   24\n```\n:::\n\n```{.r .cell-code}\nclass(AR1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"array\"\n```\n:::\n\n```{.r .cell-code}\ndim(AR1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 2\n```\n:::\n\n```{.r .cell-code}\nstr(AR1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:3, 1:4, 1:2] 1 2 3 4 5 6 7 8 9 10 ...\n```\n:::\n\n```{.r .cell-code}\n# Seleccionar la celda con el valor de 13\nx <- AR1[,,2]\n```\n:::\n\n\n# Data Frame\n\n![](dataframe.png){fig-align=\"center\"}\n\n# Lista\n\n![](Litst.png){fig-align=\"center\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Las listas también son objetos unidimensionales. Pero pueden tener elementos de diferente tipo y clase\n\nv <- 1:10\ndf <- data.frame(num= 1:4, letra= letters[1:4])\n\nlista <- list(vector=v, dataframe= df, Matriz= m3)\n\ndim(lista)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nlength(lista)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nv2 <- lista[1]\nv3 <- lista[[1]]\nclass(v3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ndf_list <- lista[[2]]\n\nmat <- lista$Matriz\n\nlista[[1]][]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}