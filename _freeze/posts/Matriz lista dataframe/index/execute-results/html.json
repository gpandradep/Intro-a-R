{
  "hash": "6926d5cdb1a64c1a4db6850bc317f6ae",
  "result": {
    "markdown": "---\ntitle: \"4. Vectores, Matrices, listas y dataframes\"\ndescription: \"Objetos más complejos, distinguirlos y extraer información\"\nauthor: \"Gabriel Andrade Ponce\"\ndate: \"2022-11-24\"\n---\n\n\n# Vectores\n\nLos vectores son objetos que llevan una colección de uno o más datos del mismo tipo. El tipo del vector es igual al tipo de datos que contiene y solo puede contener datos del mismo tipo. Los vectores también tienen un largo, es decir el número de datos que contiene.\n\n![](vectors.png){fig-align=\"center\"}\n\nEn esencia un solo número o caracter es un vector de largo 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nminivec <- 25\nis.vector(minivec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nlength(minivec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## Concantenar\n\nPara generar vectores de mayor tamaño debemos usar la función de `c()`o concatenar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector numerico\nvec1 <- c(1,223,4,5)\nlength(vec1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nclass(vec1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\n# Vector de caracteres\nvec2 <- c(\"a\", \"b\", \"c\", \"d\")\nclass(vec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# Vector lógico\n\nvec3 <- c(TRUE, FALSE, TRUE, FALSE)\nclass(vec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# Si admite NA\n\nvec4 <- c(2.5, 30, 45.5, NA)\nclass(vec4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## Sequencia\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vec_seq1 <- 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\n(vec_seq2 <- seq(from=1, # Valor de inicio\n               to= 6)) # Valor final\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\n(vec_seq3 <- seq(from= 1,\n                to= 10,\n                by= 0.5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n[16]  8.5  9.0  9.5 10.0\n```\n:::\n:::\n\n\n## Repetir valores\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(vec_rep1 <- rep(x=25,\n                times= 5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25 25 25 25 25\n```\n:::\n\n```{.r .cell-code}\n(vec_rep2 <- rep(vec_rep1,\n                 times=3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n```\n:::\n\n```{.r .cell-code}\n(vec_rep3 <- rep(vec2,\n                each=3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"a\" \"a\" \"b\" \"b\" \"b\" \"c\" \"c\" \"c\" \"d\" \"d\" \"d\"\n```\n:::\n:::\n\n\n## Selección de valores\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_rep3[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"\n```\n:::\n\n```{.r .cell-code}\nvec_rep2[5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n\n```{.r .cell-code}\nvec_seq3[17]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n# Matrices\n\n## Array\n\n![](array.png){fig-align=\"center\"}\n\n# Data Frame\n\n![](dataframe.png){fig-align=\"center\"}\n\n# Lista\n\n![](Litst.png){fig-align=\"center\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}