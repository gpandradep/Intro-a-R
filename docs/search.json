[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducci√≥n a R y RStudio",
    "section": "",
    "text": "Bienvendos ü§ì\nHola a todos. En esta p√°gina encontrar√°n los scripts de introducci√≥n al R y RStudio.\n\n\n\n\n\nNota: Si vienes del curso de Introducci√≥n a estad√≠stica del Instituto de Ecolog√≠a A.C., puedes regresar a la p√°gina del curso con este link [ ]\n\n\nTalleres üë®‚Äçüíªüë©‚Äçüíª\n\n\n\n\n\n\n\n\n\n\n\n\n\nT√≠tulo\n\n\n\n\n\n\n\n\n\n1. Instalar R y RStudio\n\n\n\n\n\n\n\n2. ¬øQu√© son R y Rstudio?\n\n\n\n\n\n\n\n3. Objetos, operadores y funciones\n\n\n\n\n\n\n\n4. Vectores, Matrices, listas y dataframes\n\n\n\n\n\n¬†\n\n\n\n5. Carga tus datos\n\n\n\n\n\n¬†\n\n\n\n6. Gr√°ficos b√°sicos en R\n\n\n\n\n\n¬†\n\n\n\n7. Errores en R y donde solucionarlos\n\n\n\n\n\n¬†\n\n\n\n8. Modo tidyverse\n\n\n\n\n\n¬†\n\n\n\n9. Documentos desde R\n\n\n\n\n\n\nNo hay resultados"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/Instalar R y Rstudio/index.html",
    "href": "posts/Instalar R y Rstudio/index.html",
    "title": "1. Instalar R y RStudio",
    "section": "",
    "text": "Para instalar R lo primero que tienes que hacer es dirigerte a la p√°gina https://www.r-project.org/. Una vez all√≠ solo tienes que dar click en download R. Una vez den click en downlad, llegar√°n a una p√°gina con todos los mirrors para descargar R. Pueden cualquiera est√© mas cerca de su lozalizaci√≥n.\nLlegar√°n a otra p√°gina en donde les dar√°n a escoger el instalador dependiendo de su sistema operativo: Linuz, Mac o Windows. En mi caso, yo trabajo con Windows (creo que la mayor√≠a tambi√©n), entonces seguimos a otra p√°gina con las posibles instalaciones de R. Nosotros instalaremos el base. Finalmente, estaremos en la p√°gina donde podremos dar click en Download R-4.2.2. La versi√≥n puede cambiar dependiendo de la fecha, entonces los n√∫meros puede variar dependiendo de cuando sigan este tutorial.\nGuarden el instalador en donde ustedes consideren.\n\n\n\nTodo el procedimiento descargar R\n\n\n\nSi ya tienes R instalado, volverlo a descargar implica actualizarlo. Ten en cuenta que al actualizar R, tendr√°s que re-instalar toda la paqueter√≠a (ya veremos que son los paquetes de R)\n\n\n\n\nVamos a abrir el instalador que descargaron. Simplemente abrimos el archivo y seguimos todas las instrucciones tal cual. Si todo sale bien, R empezar√° a instalarse y solo debemos esperar y darle finalizar.\n\n\n\nInstalador de R\n\n\nUna vez R este instalado, tendr√°n en el escritorio o el inicio un icono como este:\n\n\n\nLogo de R\n\n\ncon un t√≠tulo como R x 64 4.x.x (los x cambi√°n depeniendo de la versi√≥n instalada).\nAl abrirlo, tendremos una ventana que tiene una subventana con el nombre de Console. Pueden tambi√©n poner archivo, nuevo script y tendr√°n otra ventana de script. En la consola podemos escribir y ejecutar c√≥digo, pero sin guardarlo. En la ventana de script podemos escribir c√≥digo y guardarlo, pero todo lo que ejecutemos se ver√° solo en la consola.\n\nLa verdad es que R como tal no es muy amigable de buenas a primeras. De hecho, yo nunca uso el R base. Por este motivo, vamos a instalar una interfaz de usuario m√°s amigable llamada RStudio."
  },
  {
    "objectID": "posts/Instalar R y Rstudio/index.html#descargar-rstudio",
    "href": "posts/Instalar R y Rstudio/index.html#descargar-rstudio",
    "title": "1. Instalar R y RStudio",
    "section": "Descargar RStudio",
    "text": "Descargar RStudio\nPara descargar RStudio tenemos que ir a la p√°gina de https://posit.co/ (posit es la empresa). Le damos a Download RStudio y luego en RStudio Desktop (el free). Llegaremos a una p√°gina donde nos dice que el primer paso es instalar R, ya que RStudio es solo una interfaz, este no funciona sin tener instalado R. Como ya instalamos R, vamos ir al paso dos que es instalar RStudio desktop. Nota: aunque dice ‚Äúfor mac‚Äù descarga el .exe de windows. Guardamos el instalador y listo.\n\n\n\nDescargar RStudio"
  },
  {
    "objectID": "posts/Instalar R y Rstudio/index.html#instalar-rstudio-1",
    "href": "posts/Instalar R y Rstudio/index.html#instalar-rstudio-1",
    "title": "1. Instalar R y RStudio",
    "section": "Instalar RStudio",
    "text": "Instalar RStudio\nAl abrir el instalador simplemente seguimos las instrucciones. El √∫nico paso importante es donde le decimos donde esta instalado R, pero si seguimos por default la instalaci√≥n de R no tenemos que cambiar ning√∫na direcci√≥n.\n\nFinalmente, se instalar√° y te generar√° un icono como este\n\n\n\nRstudio logo\n\n\nAl abrir RStudio tendremos algo as√≠:\n\n\n\nRStudio\n\n\nTenemos nuestra consola, donde se ejecutan los procesos, los scripts donde vamos desarrollando el c√≥digo, pero adem√°s tenemos un ambiente: donde se guardan todos los objetos que vamos creando. Tambi√©n tenemos otra pesta√±a con los archivos, los gr√°ficos que se generan, los paquetes entre otas cosas.\nCr√©anme RStudio facilita mucho la vida a quienes no somos programadores, ayuda a completar funciones, objetos, pero adem√°s tienen muchas extensiones qu√© expanden las capacidades de R. Es por eso que les recomiendo trabajen siempre desde RStudio, no se van a arrepentir üòâ.\n\n\n\nIllustrating having funR: Artwork by ‚Äô@‚Äôallison_horst"
  },
  {
    "objectID": "posts/RyRstudio/index.html",
    "href": "posts/RyRstudio/index.html",
    "title": "2. ¬øQu√© son R y Rstudio?",
    "section": "",
    "text": "En pocas palabras R es un lenguaje y un ambiente creado para realizar operaciones estad√≠sticas y gr√°ficas. En un principio R se deriv√≥ de otro lenguaje, S. El lenguaje S fue un proyecto que inici√≥ en 1976 de la mano de John Chambers y que madur√≥ hasta 1998. La idea de S era generar una interfaz que facilitara el an√°lisis de datos a los programadores, pero paulatinamente tambi√©n a un p√∫blico menos especializado. Es decir, quer√≠an crear algo que nos permitiera escribir un c√≥digo sin sentirnos programadores.\nEl problema con S es que tenias que comprarlo y ya sabemos que en nuestros pa√≠ses preferimos invertir el dinero en cosas m√°s importantes, como comida üçî. En 1991 Ross Ihaka y Robert Gentleman se basaron en S, para crear R (Ihaka and Gentleman 1996). Lo crucial respecto a R es que fue creado como un software libre, es decir que adem√°s de ser gratuito, su c√≥digo es abierto. √âsto √∫ltimo quiere decir que cualquiera puede ver c√≥mo funciona por dentro y modificarlo. De hecho, R se beneficia de que miles de personas crean herramientas destinadas para much√≠simos fines.\nR en s√≠ es joven ya que la primera versi√≥n se lanz√≥ al p√∫blico en el 2000 y ahora es manejado por el R core Team (R Core Team 2017).\n\n\n\nCronolog√≠a de R"
  },
  {
    "objectID": "posts/RyRstudio/index.html#los-proyectos-de-rstudio",
    "href": "posts/RyRstudio/index.html#los-proyectos-de-rstudio",
    "title": "2. ¬øQu√© son R y Rstudio?",
    "section": "Los proyectos de RStudio",
    "text": "Los proyectos de RStudio\nEntre otras cosas, RStudio permite un esquema de trabajo en proyectos. Cuando empecemos a trabajar con R se dar√°n cuenta que debemos especificar la ruta (direcci√≥n de la carpeta) donde estar√°n los archivos que usaremos. Para ello, cada vez que iniciamos R debemos especificar la direcci√≥n. Al crear proyectos con RStudio el IDE autom√°ticamente selecciona la carpeta del proyecto como directorio de trabajo. Tiene otras ventajas, pero esta es la que m√°s nos compete en este nivel.\nPara crear el proyecto hay que abrir RStudio, ir a archivo (file) -> nuevo proyecto (new Project). Se abrir√° una nueva ventana con tres opciones: Nueva carpeta, carpeta existente y versi√≥n de control (este √∫ltimo es para github). Por ahora centr√©monos en las dos primeros. La principal diferencia es que en una se crea una nueva carpeta y en la segunda se selecciona una carpeta previamente existente. Como ver√°n hay muchos tipos de proyectos, pero por ahora solo nos interesa un proyecto de R simple. Luego veremos que nos pide que le demos un nombre y verifiquemos la carpeta en la cual se crear√°.\n\n\n\nCrear un proyecto\n\n\nPara abrir el proyecto simplemente nos vamos a la carpeta que escogimos y abrimos el archivo .Rproj. Este archivo autom√°ticamente abre RStudio. Para verificar que estamos dentro de un proyecto podemos observar en la parte superior derecha del RStudio, donde estar√° el nombre de nuestro proyecto.\n\n\n\nabrir el proyecto"
  },
  {
    "objectID": "posts/RyRstudio/index.html#manejo-de-datos",
    "href": "posts/RyRstudio/index.html#manejo-de-datos",
    "title": "2. ¬øQu√© son R y Rstudio?",
    "section": "Manejo de datos",
    "text": "Manejo de datos\nProcesar, transformar y explorar tus datos. Una habilidad que nos ahorrar√° mucho tiempo y dolor de cabeza. Con R puedes transformar tus datos como tu quieras, siempre y cuando sepas c√≥mo. Esto es importante porque ciertos an√°lisis requieren una estructura de datos particular.\n\n\n\nhttps://bookdown.org/content/3515/tidydata.html"
  },
  {
    "objectID": "posts/RyRstudio/index.html#estad√≠stica",
    "href": "posts/RyRstudio/index.html#estad√≠stica",
    "title": "2. ¬øQu√© son R y Rstudio?",
    "section": "Estad√≠stica",
    "text": "Estad√≠stica\nEn parte es para lo que fue creado R. R tiene la capacidad de ajustar una buena variedad de modelos. Pero es la comunidad la que se ha encargado de agregar a R una gama bastante amplia de an√°lisis . Puedes encontrar hoy en d√≠a modelos estad√≠sticos para temas ecol√≥gicos, de bioinformatica, filogenia, biolog√≠a molecular, morfometr√≠a etc. Solo basta con saber buscar.\n\n\n\nhttps://lakens.github.io/statistical_inferences"
  },
  {
    "objectID": "posts/RyRstudio/index.html#gr√°ficas",
    "href": "posts/RyRstudio/index.html#gr√°ficas",
    "title": "2. ¬øQu√© son R y Rstudio?",
    "section": "Gr√°ficas",
    "text": "Gr√°ficas\nLa capacidad gr√°fica de R es grandiosa. Esta dise√±ado para generar gr√°ficas con calidad de publicaci√≥n, pero tambi√©n puedes ingeni√°rtelas par generar gr√°ficos de divulgaci√≥n. Puedes hacer mapas, animaciones, arte etc. Puedes pasarte por p√°ginas como https://r-graph-gallery.com/index.html o https://r-charts.com/ para ver much√≠simos ejemplos y tips. Aprender a graficar hace parte importante del proceso de explorar tus datos."
  },
  {
    "objectID": "posts/RyRstudio/index.html#documentos",
    "href": "posts/RyRstudio/index.html#documentos",
    "title": "2. ¬øQu√© son R y Rstudio?",
    "section": "Documentos",
    "text": "Documentos\nCon la inclusi√≥n de Rmakrwon y Quarto se pude generar documentos de html, pdf y word desde R. Incluso las nuevas versiones de RStudio cuentan con un modo visual para facilitar la escritura de documentos. Hay paquetes dise√±ados para generar CV, presentaciones, libros, art√≠culos cient√≠ficos e incluso tesis.\n\n\n\nhttps://yihui.org/en/2022/04/quarto-r-markdown/"
  },
  {
    "objectID": "posts/RyRstudio/index.html#p√°ginas-web",
    "href": "posts/RyRstudio/index.html#p√°ginas-web",
    "title": "2. ¬øQu√© son R y Rstudio?",
    "section": "P√°ginas web",
    "text": "P√°ginas web\nBasta con que te diga que esta p√°gina web esta construida con RStudio, usando Quarto blogs."
  },
  {
    "objectID": "posts/RyRstudio/index.html#aplicaciones",
    "href": "posts/RyRstudio/index.html#aplicaciones",
    "title": "2. ¬øQu√© son R y Rstudio?",
    "section": "Aplicaciones",
    "text": "Aplicaciones\nTambi√©n puedes crear aplicaciones e interfaz de usuario para explorar datos o facilitar la vida. Por ejemplo, si tienes dudas de las estad√≠sticas de algunos pok√©mon, puedes checar esta app creada en R https://dgranjon.shinyapps.io/shinyMons/_w_74175819/"
  },
  {
    "objectID": "posts/Operadores objetos y funciones/index.html",
    "href": "posts/Operadores objetos y funciones/index.html",
    "title": "3. Objetos, operadores y funciones",
    "section": "",
    "text": "Lo primero es abrir RStudio y crear un nuevo R script."
  },
  {
    "objectID": "posts/Operadores objetos y funciones/index.html#numericos",
    "href": "posts/Operadores objetos y funciones/index.html#numericos",
    "title": "3. Objetos, operadores y funciones",
    "section": "Numericos",
    "text": "Numericos\n\n#Numericos (pueden se enteros o continuos)\nnumero_1 <- 25\nnumero_2 <- 27.5\n\n# Los objetos numericos permiten hacer operaciones\n(suma <- numero_1+numero_2)\n\n[1] 52.5\n\n(resta <- suma - numero_2)\n\n[1] 25\n\n(producto <- suma*resta)\n\n[1] 1312.5\n\n(etc <- ((producto/suma)+ resta)^2)\n\n[1] 2500\n\n\n\nOperadores aritm√©ticos\n\n\nOperador\nOperaci√≥n\n\n\n\n\n+\nSuma\n\n\n-\nResta\n\n\n*\nMultiplicaci√≥n\n\n\n/\nDivisi√≥n\n\n\n^\nPotencia\n\n\n\nPero tambi√©n se pueden usar operadores relacionales, en este caso tendremos como resultado un objeto l√≥gico\n\n7<3\n\n[1] FALSE\n\n30>=50\n\n[1] FALSE\n\n50==50\n\n[1] TRUE\n\n\n\nOperadores relacionales\n\n\nOperador\nOperaci√≥n\n\n\n\n\n<\nMenor que\n\n\n<=\nMenor o igual que\n\n\n>\nMayor que\n\n\n>=\nMayor o igual que\n\n\n==\nIgual que\n\n\n!=\nDiferente de"
  },
  {
    "objectID": "posts/Operadores objetos y funciones/index.html#caracteres",
    "href": "posts/Operadores objetos y funciones/index.html#caracteres",
    "title": "3. Objetos, operadores y funciones",
    "section": "Caracteres",
    "text": "Caracteres\nComo su nombre lo indica son nombres o palabras . Los caracteres siempre estar√°n delimitados por comillas \"xx\"\n\n(carac_1 <- \"a\")\n\n[1] \"a\"\n\n(carac_2 <- \"me gusta la estad√≠stica.com\")\n\n[1] \"me gusta la estad√≠stica.com\"\n\n\n¬øQue pasa cuando hacemos esto?\n\nnumero_ment <- \"69\"\n\nEst√° de m√°s decir que con los caracteres no se pueden hacer operaciones aritm√©ticas. Aun as√≠ se pueden usar operadores relacionales con los caracteres.\n\n\"a\"< \"b\" # En este caso R usa el orden alfab√©tico para decidir.\n\n[1] TRUE\n\n \"hola\"== \"Que onda\"\n\n[1] FALSE\n\n\"23\"!= \"veintitres\"\n\n[1] TRUE"
  },
  {
    "objectID": "posts/Operadores objetos y funciones/index.html#l√≥gicos",
    "href": "posts/Operadores objetos y funciones/index.html#l√≥gicos",
    "title": "3. Objetos, operadores y funciones",
    "section": "L√≥gicos",
    "text": "L√≥gicos\nLos objetos de tipo l√≥gico pueden ser o de verdadero (TRUE) o falso (FALSE). B√°sicamente representan cuando una condici√≥n se cumple o no\n\n# Podemos crear un objeto que dentro tenga un valor l√≥gico\n(logic <- TRUE)\n\n[1] TRUE\n\n# Son m√°s √∫tiles para operadores relacionale so booleanos\n\nnumero_1< numero_2\n\n[1] TRUE\n\n# Por ejemplo el operador condicional, donde si una condici√≥n es verdadera, entonces es igual a verdadero\n\nTRUE|FALSE\n\n[1] TRUE"
  },
  {
    "objectID": "posts/Operadores objetos y funciones/index.html#valores-faltantes",
    "href": "posts/Operadores objetos y funciones/index.html#valores-faltantes",
    "title": "3. Objetos, operadores y funciones",
    "section": "Valores faltantes",
    "text": "Valores faltantes\nHay un tipo de valor en R que especifica que dicha observaci√≥n o valor no existe o es perdido. Cabe aclarar que NA es diferente de 0: un 0 indica por ejemplo que si fuimos a contar ranas en cierto estanque no hab√≠a ninguna, pero un NA quiere decir que nunca se fue a contar ranas a ese estanque. En R, un NA se reconoce como un objeto tipo l√≥gico.\n\n(no_hay <- NA)\n\n[1] NA"
  },
  {
    "objectID": "posts/Operadores objetos y funciones/index.html#funciones-de-externas-a-base-r",
    "href": "posts/Operadores objetos y funciones/index.html#funciones-de-externas-a-base-r",
    "title": "3. Objetos, operadores y funciones",
    "section": "Funciones de externas a base R",
    "text": "Funciones de externas a base R\nHay muchas funciones que vienen por defecto en R. Sin embargo, gran parte de las funciones son creadas por la comunidad y vienen en paquetes. Para usar este tipo de funciones debemos primero instalar un paquete, luego llamarlo y ah√≠ si ejecutar su funci√≥n. Si no llamamos el paquete R nos dir√° que hay un error porque no encuentra dicha funci√≥n.\nPrimero instalemos un paquete mediante la funci√≥n install.packages, adentro de la funci√≥n le diremos el nombre del paquete entre comillas. Recuerden que para instalar un paquete necesitamos conexi√≥n a Internet.\n\ninstall.packages(\"beepr\")\n\nAhora vamos a llamar al paquete con la funci√≥n library. Note que en este caso ya no necesitamos poner el paquete entre comillas\n\nlibrary(beepr)\n\nFinalmente, usaremos una funci√≥n que viene con el paquete beepr\n\nbeep(sound = 8)\n\nExisten una cantidad inmensa de paquetes en R, la mayor√≠a se encuentran en un repositorio llamado CRAN. Creo que la mejor manera de encontrar el paquete que buscas es por medio de san google. Supongamos que queremos buscar alg√∫n paquete que calcule √≠ndices de diversidad : package for shannon index in R. Probablemente aparezca vegan, entonces es solo cuesti√≥n de instalarlo y claro aprender a usarlo."
  },
  {
    "objectID": "posts/Matriz lista dataframe/index.html",
    "href": "posts/Matriz lista dataframe/index.html",
    "title": "4. Vectores, Matrices, listas y dataframes",
    "section": "",
    "text": "Los vectores son objetos que llevan una colecci√≥n de uno o m√°s datos del mismo tipo. El tipo del vector es igual al tipo de datos que contiene y solo puede contener datos del mismo tipo. Los vectores tambi√©n tienen un largo, es decir el n√∫mero de datos que contiene.\n\n\n\n\n\nEn esencia un solo n√∫mero o caracter es un vector de largo 1\n\nminivec <- 25\nis.vector(minivec)\n\n[1] TRUE\n\nlength(minivec)\n\n[1] 1\n\n\n\n\nPara generar vectores de mayor tama√±o debemos usar la funci√≥n de c()o concatenar.\n\n# Vector numerico\nvec1 <- c(1,223,4,5)\nlength(vec1)\n\n[1] 4\n\nclass(vec1)\n\n[1] \"numeric\"\n\n# Vector de caracteres\nvec2 <- c(\"a\", \"b\", \"c\", \"d\")\nclass(vec2)\n\n[1] \"character\"\n\n# Vector l√≥gico\n\nvec3 <- c(TRUE, FALSE, TRUE, FALSE)\nclass(vec2)\n\n[1] \"character\"\n\n# Si admite NA\n\nvec4 <- c(2.5, 30, 45.5, NA)\nclass(vec4)\n\n[1] \"numeric\"\n\n\n\n\n\n\n(vec_seq1 <- 1:10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n(vec_seq2 <- seq(from=1, # Valor de inicio\n               to= 6)) # Valor final\n\n[1] 1 2 3 4 5 6\n\n(vec_seq3 <- seq(from= 1,\n                to= 10,\n                by= 0.5))\n\n [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n[16]  8.5  9.0  9.5 10.0\n\n\n\n\n\n\n(vec_rep1 <- rep(x=25,\n                times= 5))\n\n[1] 25 25 25 25 25\n\n(vec_rep2 <- rep(vec_rep1,\n                 times=3))\n\n [1] 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n\n(vec_rep3 <- rep(vec2,\n                each=3))\n\n [1] \"a\" \"a\" \"a\" \"b\" \"b\" \"b\" \"c\" \"c\" \"c\" \"d\" \"d\" \"d\"\n\n\n\n\n\n\nvec_rep3[1]\n\n[1] \"a\"\n\nvec_rep2[5]\n\n[1] 25\n\nvec_seq3[17]\n\n[1] 9"
  },
  {
    "objectID": "posts/Matriz lista dataframe/index.html#array",
    "href": "posts/Matriz lista dataframe/index.html#array",
    "title": "4. Vectores, Matrices, listas y dataframes",
    "section": "Array",
    "text": "Array"
  }
]